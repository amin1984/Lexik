<?php

namespace Satisfactory\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    public function getAll()
    {
        $query = $this->createQueryBuilder('u')
                ->select()
                ->getQuery();

        return $query->getScalarResult();
    }
    
    /**
     * @param string $role
     *
     * @return array
     */
    public function findByRole($role) 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->orderBy('u.username', 'ASC')
                ->where('u.roles LIKE :roles')
                ->setParameter('roles', '%"' . $role . '"%');

        return $qb->getQuery()->getResult();
    }
    
    /**
     * @param string $role
     * @param string $expression
     *
     * @return array
     */
    public function findWithSearch($role, $expression) 
    {
        
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.roles LIKE :roles')
                ->andWhere('u.username LIKE :expression')
                ->setParameter('roles', '%' . $role . '%')
                ->setParameter('expression', '%' . $expression . '%');
        
        return $qb->getQuery()->getResult();
    }
    
    /**
     * @param $limit
     * @param $offset
     * @param $input
     *
     * @return array
     */
    public function paginatorQuery($limit, $offset = 0, $input, $order, $orderType)
    {
        
        $qb = $this->createQueryBuilder('d');

        if ($input) {
            $qb->andWhere('d.username LIKE :username')
                    ->setParameter('username', '%' . $input . '%');
        }

        if ($limit) {
            $qb->setFirstResult($offset)
                    ->setMaxResults($limit);
        }
        
        $qb->orderBy('d.'.$order, $orderType);

        return $qb->getQuery()->getResult();
    }
    
    /**
     * @param $offset
     * @param $input
     *
     * @return array
     */
    public function paginatorQueryLimitOff( $offset = 0, $input, $order, $orderType)
    {
        
        $qb = $this->createQueryBuilder('d');

        if ($input) {
            $qb->andWhere('d.username LIKE :username')
                    ->setParameter('username', '%' . $input . '%');
        }
        
        
        $qb->orderBy('d.'.$order, $orderType);

        return $qb->getQuery()->getResult();
    }
}
