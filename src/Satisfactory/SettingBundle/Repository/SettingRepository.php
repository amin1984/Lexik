<?php

namespace Satisfactory\SettingBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * SettingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SettingRepository extends EntityRepository
{
     /**
     * @param name of setting $paramName
     * @param name of agency $agency
     *
     * @return array
     */
    public function findBySearch($paramName, $agency, $status) 
    {
        
        $now = new \DateTime();
        $qb = $this->createQueryBuilder('s')
                ->select('s');
        if ($paramName) {
            $qb->where('s.name LIKE :paramName')
               ->setParameter('paramName', '%'.$paramName.'%');
        }
        if($agency <> 'all') {
               $qb->leftJoin('s.agency','a')
               ->andwhere('a.name = :agency')
               ->setParameter('agency', $agency);
        }
        if($status <> 'all') {
            if($status == 1) { // Enquête en cours
               $qb->andwhere('s.dateBegin <= :now')  
               ->setParameter('now', $now);
               $qb->andwhere('s.dateEnd >= :now')  
               ->setParameter('now', $now);
            }
            if($status == 2) { //  Enquête non débutée
               $qb->andwhere('s.dateBegin >= :now')  
               ->setParameter('now', $now);
               $qb->andwhere('s.dateEnd >= :now')  
               ->setParameter('now', $now);
            }
            if($status == 3) { //   Enquêtes cloturées
               $qb->andwhere('s.dateBegin <= :now')  
               ->setParameter('now', $now);
               $qb->andwhere('s.dateEnd <= :now')  
               ->setParameter('now', $now);
            }
        }


        return $qb->getQuery()->getResult();
    }
     /**
     * @param name of setting $paramName
     * @param name of agency $agency
     *
     * @return array
     */
    public function findBySearchCorrespond($paramName=null, $agency, $segment, $quest, $dateBegin, $dateEnd,$setting = null) 
    {
        
        $now = new \DateTime();
        $qb = $this->createQueryBuilder('s')
                ->select('s');
        $result = $qb->getQuery()->getResult();
        if($result) {
            foreach ($result as $k=>$r) {
                
                if($setting) {
                    if($r->getId() == $setting->getId()) {
                        unset($result[$k]);
                        continue;
                    }
                }
                $agencies = $r->getAgency();
                if(count($agencies) !=  count($agency)) {
                    unset($result[$k]);
                    continue;
                }
                else {
                    if($agencies) {
                        foreach ($agencies as $a) {
                            $aganciesArray[] = $a->getId();
                        }
                    }
                    if($agency) {
                        foreach ($agency as $a) {
                            $aganciesFormArray[] = $a->getId();
                        }
                    }
                    if(!$this->identical_values(@$aganciesArray, @$aganciesFormArray)) {
                        unset($result[$k]);
                        continue;
                    }
                }
                $segments = $r->getSegment();
                if(count($segments) !=  count($segment)) {
                    unset($result[$k]);
                    continue;
                }
                else {
                    if($segments) {
                        foreach ($segments as $a) {
                            $segmentsArray[] = $a->getId();
                        }
                    }
                    if($segment) {
                        foreach ($segment as $a) {
                            $segmentsFormArray[] = $a->getId();
                        }
                    }
                    if(!$this->identical_values(@$segmentsArray, @$segmentsFormArray)) {
                        unset($result[$k]);
                        continue;
                    }
                }
                if($r->getQuest()->getId() != $quest->getId()) {
                    unset($result[$k]);
                    continue;
                }
                if($r->getDateBegin() != $dateBegin) {
                    unset($result[$k]);
                    continue;
                }
                
                if($r->getDateEnd() != $dateEnd) {
                    unset($result[$k]);
                    continue;
                }
            }
        }
        if($result) {
            $resultList = "";
            foreach ($result as $r) {
                $resultList[]= "- ".$r->getName(); 
            }
            $resultList = implode(" / ", $resultList);
            return $resultList;
        }
        return false;
    }
    
    public function getByDateBetween()
{
        $now = new \DateTime();
//        $to   = new \DateTime($date->format("Y-m-d")." 23:59:59");

        $qb = $this->createQueryBuilder("e");
        $qb
            ->where('e.dateBegin <= :now')
            ->andWhere('e.dateEnd >= :now')
            ->setParameter('now', $now->format('Y-m-d H:i:s'))
        ;
        $result = $qb->getQuery()->getResult();

        return $result;
    }
    
    private function identical_values( $arrayA , $arrayB ) { 
        if(!$arrayA || !$arrayB)
            return true;
        sort( $arrayA ); 
        sort( $arrayB ); 

        return $arrayA == $arrayB; 
    } 
    
    /**
     * @param $limit
     * @param $offset
     * @param $client
     *
     * @return array
     */
    public function paginatorQuery($limit, $offset = 0, $input, $agency, $order, $orderType, $status)
    {
        
        $qb = $this->createQueryBuilder('s');

        if ($input) {
            $qb->andWhere('s.name LIKE :name')
                    ->setParameter('name', '%' . $input . '%');
        }
        
        if($agency <> 'all') {
               $qb->leftJoin('s.agency','a')
               ->andwhere('a.id = :agency')
               ->setParameter('agency', $agency);
        }
        
        if ($status) {
            if ($status == 1) {
                $qb->andWhere('s.dateEnd >= :today AND s.dateBegin <= :today')
                        ->setParameter('today', date('Y-m-d'));
            } elseif ($status == 2) {
                $qb->andWhere('s.dateBegin > :today')
                        ->setParameter('today', date('Y-m-d'));
            } elseif ($status == 3) {
                $qb->andWhere('s.dateEnd < :today')
                        ->setParameter('today', date('Y-m-d'));
            }
        }

        if ($limit) {
            $qb->setFirstResult($offset)
                    ->setMaxResults($limit);
        }
        
        $qb->orderBy('s.'.$order, $orderType);

        return $qb->getQuery()->getResult();
    }
    
    /**
     * @param $offset
     * @param $client
     *
     * @return array
     */
    public function paginatorQueryLimitOff( $offset = 0, $input, $agency, $order, $orderType, $status)
    {
        
        $qb = $this->createQueryBuilder('s');

        if ($input) {
            $qb->andWhere('s.name LIKE :name')
                    ->setParameter('name', '%' . $input . '%');
        }
        
        if($agency <> 'all') {
               $qb->leftJoin('s.agency','a')
               ->andwhere('a.id = :agency')
               ->setParameter('agency', $agency);
        }
        
         if ($status) {
            if ($status == 1) {
                $qb->andWhere('s.dateEnd >= :today AND s.dateBegin <= :today')
                        ->setParameter('today', date('Y-m-d'));
            } elseif ($status == 2) {
                $qb->andWhere('s.dateBegin > :today')
                        ->setParameter('today', date('Y-m-d'));
            } elseif ($status == 3) {
                $qb->andWhere('s.dateEnd < :today')
                        ->setParameter('today', date('Y-m-d'));
            }
        }
        
        $qb->orderBy('s.'.$order, $orderType);

        return $qb->getQuery()->getResult();
    }
}
