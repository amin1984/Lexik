<?php

namespace Satisfactory\CronBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CronexecutionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CronexecutionRepository extends EntityRepository
{
    
    /**
     * @param string $expression
     *
     * @return array
     */
    public function findWithSearch($dealingSelected, $beginAt,$endAt) 
    {
        $qb = $this->createQueryBuilder('d')
                ->select('d');
        $qb->where('d.dealing <> 0');
        if($dealingSelected != "all") {
            $qb->andWhere('d.dealing = :dealingSelected');
            $qb->setParameter('dealingSelected', $dealingSelected);
        }
        if($beginAt != "") {
            $beginAt = new \DateTime($beginAt, new \DateTimeZone('Europe/London'));
            $qb->andWhere($qb->expr()->gte('d.beginAt', ':beginAt'));
            $qb->setParameter('beginAt', $beginAt);
        }
        if($endAt != "") {
            $endAt = new \DateTime($endAt, new \DateTimeZone('Europe/London'));
            $endAt->setTime(23, 59, 59);
            $qb->andWhere($qb->expr()->lte('d.beginAt', ':endAt'));
            $qb->setParameter('endAt', $endAt);
        }
//        print_r(count($qb->getParameters()));
//        exit();
        return $qb->getQuery()->getResult();
    }
    
     /**
     * @param $limit
     * @param $offset
     * @param $tag
     *
     * @return array
     */
    public function paginatorQuery($limit, $offset = 0, $beginAt, $endAt, $dealing, $order, $orderType)
    {
        
        $qb = $this->createQueryBuilder('d');
        
        if ($dealing <> '') {
            $qb->andWhere('d.dealingName LIKE :dealing')
                    ->setParameter('dealing', '%'.$dealing.'%');
        }
        
        if ($beginAt) {
            $qb->andWhere('d.beginAt >=:beginAt')
                    ->setParameter('beginAt', $beginAt);
        }
        
        if ($endAt) {
            $qb->andWhere('d.endAt <=:endAt')
                    ->setParameter('endAt', $endAt);
        }

        if ($limit) {
            $qb->setFirstResult($offset)
                    ->setMaxResults($limit);
        }
        
        $qb->orderBy('d.'.$order, $orderType);

        return $qb->getQuery()->getResult();
    }
    
    /**
     * @param $offset
     * @param $tag
     *
     * @return array
     */
    public function paginatorQueryLimitOff( $offset = 0, $beginAt, $endAt, $dealing, $order, $orderType)
    {
        
        $qb = $this->createQueryBuilder('d');

        if ($dealing <> '') {
            $qb->andWhere('d.dealingName LIKE :dealing')
                    ->setParameter('dealing', '%'.$dealing.'%');
        }
        
        if ($beginAt) {
            $qb->andWhere('d.beginAt >=:beginAt')
                    ->setParameter('beginAt', $beginAt);
        }

        if ($endAt) {
            $qb->andWhere('d.endAt <=:endAt')
                    ->setParameter('endAt', $endAt);
        }

        $qb->orderBy('d.' . $order, $orderType);

        return $qb->getQuery()->getResult();
    }
    

}
