<?php

namespace Satisfactory\OperationBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CorrespondanceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CorrespondanceRepository extends EntityRepository
{
    /**
     * @param User entity $client
     * @param string $expression
     *
     * @return array
     */
    public function searchByClient($client, $expression) 
    {
        
        $qb = $this->createQueryBuilder()
                ->field('client')
                ->equals(new \MongoRegex('/.*'.$client.'.*/i'))
                ->field('name')
                ->equals(new \MongoRegex('/.*'.$expression.'.*/i'));
        
        return $qb->getQuery()->execute();
    }
    
    /**
     * @param string $expression
     *
     * @return array
     */
    public function findWithSearch($expression) 
    {
        
//        $qb = $this->createQueryBuilder()
//                ->field('name')
//                ->equals(new \MongoRegex('/.*'.$expression.'.*/i'));
//
//        return $qb->getQuery()->execute();
//        
        
        $qb = $this->createQueryBuilder('c')
                ->select('c')
                ->where('c.name LIKE :expression')
                ->setParameter('expression', '%' . $expression . '%');
        
        return $qb->getQuery()->getResult();
    }
    
    /**
     * @param $limit
     * @param $offset
     * @param $client
     *
     * @return array
     */
    public function paginatorQuery($limit, $offset = 0, $input, $client, $order, $orderType)
    {
        
        $qb = $this->createQueryBuilder('d');

        if ($input) {
            $qb->andWhere('d.name LIKE :name')
                    ->setParameter('name', '%' . $input . '%');
        }
        
        if ($client <> 'all') {
            $qb->andWhere('d.client =:client')
                    ->setParameter('client', $client);
        }

        if ($limit) {
            $qb->setFirstResult($offset)
                    ->setMaxResults($limit);
        }
        
        $qb->orderBy('d.'.$order, $orderType);

        return $qb->getQuery()->getResult();
    }
    
    /**
     * @param $offset
     * @param $client
     *
     * @return array
     */
    public function paginatorQueryLimitOff( $offset = 0, $input, $client, $order, $orderType)
    {
        
        $qb = $this->createQueryBuilder('d');

        if ($input) {
            $qb->andWhere('d.name LIKE :name')
                    ->setParameter('name', '%' . $input . '%');
        }
        
        if ($client <> 'all') {
            $qb->andWhere('d.client =:client')
                    ->setParameter('client', $client);
        }
        
        $qb->orderBy('d.'.$order, $orderType);

        return $qb->getQuery()->getResult();
    }
}
